<!DOCTYPE html>
<html>
<head>
  <title>Take a Selfie</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      font-family: sans-serif;
    }
    #preview {
      margin-top: 10px;
      border: 2px solid #333;
      display: none;
    }
    video, canvas, img {
      width: 320px;
      height: 240px;
    }



    .btn {
  display: inline-block;
  padding: 12px 25px;
  margin: 10px;
  font-size: 1rem;
  font-weight: bold;
  text-align: center;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  text-decoration: none;
  border: none;
}

.btn-primary {
  background-color: orange;
  color: white;
}

.btn-primary:hover {
  background-color: #e69500;
}

.btn-secondary {
  background-color: #1f7d5f;
  color: white;
}

.btn-secondary:hover {
  background-color: #145c45;
}

.btn-outline {
  background-color: transparent;
  border: 2px solid orange;
  color: orange;
}

.btn-outline:hover {
  background-color: orange;
  color: white;
}
  </style>
</head>
<body>

  <h2>Take Your Selfie</h2>

  <video id="video" autoplay></video>
  <br />
  <button id="snap">Snap Photo</button>

  <canvas id="canvas" style="display: none;"></canvas>
  <img id="preview" alt="Your selfie will appear here" />

  <input type="file" id="selfieInput" accept="image/*" />
  <button id="uploadBtn">Upload</button>

  <div class="form-actions">
    <p><a href="/protect/upload/document" class="btn btn-secondary">← Back</a>
    <button type="submit" class="btn btn-primary">Next → Review & Complete</button></p>
  </div>

  <script>
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const snapBtn = document.getElementById('snap');
    const preview = document.getElementById('preview');
    const uploadBtn = document.getElementById('uploadBtn');
    const input = document.getElementById('selfieInput');

    // Start camera
    navigator.mediaDevices.getUserMedia({ video: true })
      .then((stream) => {
        video.srcObject = stream;
      })
      .catch((err) => {
        console.error("Camera access denied:", err);
        alert("Camera access is required to take a selfie.");
      });

    // Take snapshot
    snapBtn.addEventListener('click', () => {
      const context = canvas.getContext('2d');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      const imageData = canvas.toDataURL('image/png');
      preview.src = imageData;
      preview.style.display = 'block';
    });

    // Upload selfie
    uploadBtn.addEventListener('click', async (e) => {
      e.preventDefault();

      const file = input.files[0];
      
      // If no file selected and no preview image from canvas
      if (!file && !preview.src) {
        alert('Please take a selfie or choose a file first.');
        return;
      }

      // Check file size (only if file chosen)
      if (file && file.size > 10 * 1024 * 1024) {
        alert("Image too large. Must be under 10MB.");
        return;
      }

      const formData = new FormData();

      if (file) {
        formData.append('selfie', file);
      } else {
        // Convert base64 image from canvas to Blob
        const base64 = preview.src.split(',')[1];
        const byteChars = atob(base64);
        const byteNums = new Array(byteChars.length);
        for (let i = 0; i < byteChars.length; i++) {
          byteNums[i] = byteChars.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNums);
        const blob = new Blob([byteArray], { type: 'image/png' });
        formData.append('selfie', blob, 'selfie.png');
      }

      const token = localStorage.getItem('accessToken');
    
        const res = await fetch('/protect/upload/selfie', {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`
          },
          body: formData
        });

        const result = await res.json();
        // Redirect to success page
        if (res.ok) {
          window.location.href = '/protect/selfie/success';
        } else {
          alert(result.message || 'Upload failed');
        }
    });
  </script>

</body>
</html>




<!-- /selfie.html
<!DOCTYPE html>
<html>
<head>
  <title>Take a Selfie</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
    }
    #preview {
      margin-top: 10px;
      border: 2px solid #333;
    }
  </style>
</head>
<body>
 <h2>Take Your Selfie</h2>
<video id="video" width="320" height="240" autoplay></video>
<br />
<button id="snap">Snap Photo</button>
<canvas id="canvas" width="320" height="240" style="display: none;"></canvas>
<img id="preview" alt="Your selfie Will Appear Here" width="320" height="240"/>
<input type="file" id="selfieInput" accept="image/*" />
<button id="uploadBtn">Upload</button>

<script>
const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const preview = document.getElementById('preview');
const uploadBtn = document.getElementById('uploadBtn');

navigator.mediaDevices.getUserMedia({ video: true })
  .then((stream) => {
    video.srcObject = stream;
  });

snapBtn.addEventListener('click', () => {
  const context = canvas.getContext('2d');
  context.drawImage(video, 0, 0, canvas.width, canvas.height);
  const imageData = canvas.toDataURL('image/png');
  preview.src = imageData;
  preview.style.display = 'block';
});

document.getElementById('uploadBtn').addEventListener('click', async (e) => {
  e.preventDefault();
const input = document.getElementById('selfieInput');
  const file = input.files[0];
  const imageData = canvas.toDataURL('image/png || image/jpeg || image/jpg');

  if (!file) {
    alert('Please choose a file.');
    return;
  }

  // ✅ Check file size (max 10MB)
  if (file.size > 10 * 1024 * 1024) {
    alert("Image too large. Must be under 10MB.");
    return;
  }

  const formData = new FormData();
  formData.append('selfie', file);

  const token = localStorage.getItem('accessToken'); // Or however you store it
try {
  const res = await fetch('/submit/upload/selfie', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`
    },
    body: FormData
  });

  const result = await res.json();
  alert(result.message || 'Upload complete');
  } catch (err) {
    console.error(err);
    alert('Upload failed');
  }
});
</script>  -->




 <!-- /selfie.html
<!DOCTYPE html>
<html>
<head>
  <title>Take a Selfie</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
    }
    #preview {
      margin-top: 10px;
      border: 2px solid #333;
    }
  </style>
</head>
<body>
<h2>Take Your Selfie</h2>
<video id="video" width="320" height="240" autoplay playsinline></video>
<br/>
<button id="snap">Take Selfie</button>
<canvas id="canvas" width="320" height="240" style="display:none;"></canvas>
<img id="preview" src="" alt="Your Selfie Will Appear Here" width="320" height="240"/>

<script>
navigator.mediaDevices.getUserMedia({ video: true })
  .then(stream => {
    const video = document.getElementById('video');
    video.srcObject = stream;
  })
  .catch(err => alert("Camera access denied: " + err));

document.getElementById('snap').onclick = () => {
  const canvas = document.getElementById('canvas');
  const ctx = canvas.getContext('2d');
  ctx.drawImage(document.getElementById('video'), 0, 0, 320, 240);

  // Preview selfie
  const preview = document.getElementById('preview');
  preview.src = canvas.toDataURL('image/jpeg');

  // Upload selfie
  canvas.toBlob(blob => {
    const formData = new FormData();
    formData.append('selfie', blob, 'selfie.jpg');
    fetch('/upload/selfie', {
      method: 'POST',
      body: formData,
      headers: {
        Authorization: 'Bearer ' + localStorage.getItem('token')
      }
    }).then(res => res.text()).then(alert);
  }, 'image/jpeg');
};
</script>

</body>
</html> 
 -->
